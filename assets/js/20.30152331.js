(window.webpackJsonp=window.webpackJsonp||[]).push([[20],{379:function(e,a,t){"use strict";t.r(a);var s=t(42),o=Object(s.a)({},(function(){var e=this,a=e.$createElement,t=e._self._c||a;return t("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[t("h1",{attrs:{id:"node概述"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node概述"}},[e._v("#")]),e._v(" Node概述")]),e._v(" "),t("p",[e._v("什么是NodeJS，以及他的整个前世今生")]),e._v(" "),t("h2",{attrs:{id:"node的发展前景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的发展前景"}},[e._v("#")]),e._v(" Node的发展前景")]),e._v(" "),t("p",[e._v("你可能看到了 Node.js 的种种优点，但却忽略了它存在的各种问题")]),e._v(" "),t("p",[e._v("在虚拟机层面 Node.js 基于的 v8 VM 看起来很不错，但和 Java 的 VM 一比，差距甚远。在服务器领域，特别是拥有众多 CPU 和大量内存的环境下，Java 的 VM 几乎是你能在地球上找到的最好的 VM。而 v8 既不能充分利用多 CPU 的性能，也不能将内存充分利用。你唯一能做的事情就是开很多个 Node.js 实例来缓解，但这进一步带来了更多的问题。")]),e._v(" "),t("p",[e._v("在语言层面 JavaScript 本身的设计让你感觉很灵活，因为它基本上是不对类型进行约束的，只有当运行过程中发生了错误才会提示你，毕竟在浏览器环境内，这算不上什么问题；但在一个团队内进行协作时，你会深刻的明白类型系统如果能在运行前就帮你找出那些低级的类型错误问题，将会节省你多少的时间和金钱。特别是别忘了，系统总是在演进的，一个稍微复杂些的业务系统就拥有几十个乃至上百个类型，而类型修改又往往很频繁，想想这个过程里会发生些什么你就明白了。（更新：TypeScript 的出现很大程度解决了这个问题，目前在实践层面而言，至少我们确实知道这个问题能够解决；而且 WebAssembly 在 Node.js 中的落地未来我们甚至可以期待更好的解决方案）")]),e._v(" "),t("p",[e._v("在领域应用层面 Node.js 在 Web 开发领域特别是其中的前端部分已经达到了惊人的繁荣程度，甚至有不少重要系统的后端部分也基于 Node.js 完成。但如果仅凭这些就轻易的认为 Node.js 将会一统全栈打败包括 Java 在内的其它语言是很幼稚的。首先，在一个大型的系统架构中，整个系统是拆分成很多很小的业务系统的，这些系统往往通过消息队列（如 RabbitMQ、Kafka 等等）相互连接起来。也许在小型 Web 站点中，你从来没用过这些。但相信我，在但凡稍微大一些的业务系统中，都是这么干的。这些消息队列服务存在的理由就是将各个子系统解耦。这样一来，你可以在前端部分应用 Node.js 进行快速开发，在业务处理部分使用 Java 来完成。数据分析系统却可以使用 Python/Scala （例如基于 Spark）实现。大型业务系统的架构者们都是些经验丰富的老手，他们知道每个语言/系统的利弊，也知道世界总在变，今天是 Node.js、明天也许就是另一个新秀，因此在整个业务系统中，你要做的根本不是“统一”，反而是“分离”。这样的设计才能够预留出扩展和变更的机会。")]),e._v(" "),t("p",[e._v("总的来看，Node.js 特别适合中小型系统的快速开发，而当系统变得复杂以后，Node.js 更适合充当 Web Gateway 的角色，以及用于前端开发。在这两方面它拥有绝对优势。")]),e._v(" "),t("h2",{attrs:{id:"node的应用场景"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的应用场景"}},[e._v("#")]),e._v(" Node的应用场景")]),e._v(" "),t("p",[e._v("待学习")]),e._v(" "),t("h2",{attrs:{id:"node的事件机制和单线程"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的事件机制和单线程"}},[e._v("#")]),e._v(" Node的事件机制和单线程")]),e._v(" "),t("p",[e._v("待学习")]),e._v(" "),t("h2",{attrs:{id:"node的v8引擎"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的v8引擎"}},[e._v("#")]),e._v(" Node的V8引擎")]),e._v(" "),t("p",[e._v("待学习")]),e._v(" "),t("h2",{attrs:{id:"node的io操作"}},[t("a",{staticClass:"header-anchor",attrs:{href:"#node的io操作"}},[e._v("#")]),e._v(" Node的IO操作")]),e._v(" "),t("p",[e._v("待学习")])])}),[],!1,null,null,null);a.default=o.exports}}]);